"""
Media Describe Overrides Node

Provides paragraph-level override controls for the MediaDescribe node.
Allows users to replace specific paragraphs generated by Gemini with custom text.
"""

class MediaDescribeOverrides:
    """
    A ComfyUI custom node for configuring paragraph overrides for MediaDescribe.
    Outputs an OVERRIDES dictionary that can be connected to MediaDescribe node.
    """

    def __init__(self):
        pass

    @classmethod
    def INPUT_TYPES(s):
        """
        Return a dictionary which contains config for all input fields.
        All fields are optional - leave empty to use Gemini's output.
        """
        return {
            "required": {},
            "optional": {
                "override_subject": ("STRING", {
                    "multiline": True,
                    "default": "",
                    "tooltip": "Override text for SUBJECT paragraph (if provided, uses this instead of Gemini's output for subject)"
                }),
                "override_cinematic_aesthetic": ("STRING", {
                    "multiline": True,
                    "default": "",
                    "tooltip": "Override text for CINEMATIC AESTHETIC CONTROL paragraph (if provided, uses this instead of Gemini's output)"
                }),
                "override_stylization_tone": ("STRING", {
                    "multiline": True,
                    "default": "",
                    "tooltip": "Override text for STYLIZATION & TONE paragraph (if provided, uses this instead of Gemini's output)"
                }),
                "override_clothing": ("STRING", {
                    "multiline": True,
                    "default": "",
                    "tooltip": "Override text for CLOTHING paragraph (if provided, uses this instead of Gemini's output for clothing)"
                }),
                "override_scene": ("STRING", {
                    "multiline": True,
                    "default": "",
                    "tooltip": "Override text for SCENE paragraph (video only - if provided, uses this instead of Gemini's output)"
                }),
                "override_movement": ("STRING", {
                    "multiline": True,
                    "default": "",
                    "tooltip": "Override text for MOVEMENT paragraph (video only - if provided, uses this instead of Gemini's output)"
                }),
            }
        }

    RETURN_TYPES = ("OVERRIDES",)
    RETURN_NAMES = ("overrides",)
    FUNCTION = "create_overrides"
    CATEGORY = "Swiss Army Knife ðŸ”ª/Media Caption"

    def create_overrides(self, override_subject="", override_cinematic_aesthetic="", 
                        override_stylization_tone="", override_clothing="", 
                        override_scene="", override_movement=""):
        """
        Create an overrides dictionary from the input fields.
        
        Args:
            override_subject: Override text for SUBJECT paragraph
            override_cinematic_aesthetic: Override text for CINEMATIC AESTHETIC paragraph
            override_stylization_tone: Override text for STYLIZATION & TONE paragraph
            override_clothing: Override text for CLOTHING paragraph
            override_scene: Override text for SCENE paragraph (video only)
            override_movement: Override text for MOVEMENT paragraph (video only)
            
        Returns:
            Dictionary containing all override values
        """
        overrides = {
            "override_subject": override_subject,
            "override_cinematic_aesthetic": override_cinematic_aesthetic,
            "override_stylization_tone": override_stylization_tone,
            "override_clothing": override_clothing,
            "override_scene": override_scene,
            "override_movement": override_movement
        }
        
        return (overrides,)


# Node display name mapping
NODE_DISPLAY_NAME_MAPPINGS = {
    "MediaDescribeOverrides": "Media Describe - Overrides"
}
